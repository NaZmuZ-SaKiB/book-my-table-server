generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id          Int      @id @default(autoincrement())
  name        String
  main_image  String
  images      String[]
  description String
  open_time   String
  close_time  String
  slug        String   @unique

  price    PRICE
  items    Item[]
  reviews  Review[]
  bookings Booking[]
  tables   Table[]

  owner_id    Int      @default(7)
  owner       User     @relation(fields: [owner_id], references: [id])
  location_id Int
  location    Location @relation(fields: [location_id], references: [id], onDelete: NoAction)
  cuisine_id  Int
  cuisine     Cuisine  @relation(fields: [cuisine_id], references: [id], onDelete: NoAction)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Item {
  id            Int        @id @default(autoincrement())
  name          String
  price         String
  description   String
  restaurant_id Int
  restaurant    Restaurant @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Location {
  id          Int          @id @default(autoincrement())
  name        String
  restaurants Restaurant[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Cuisine {
  id          Int          @id @default(autoincrement())
  name        String
  restaurants Restaurant[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model User {
  id          Int          @id @default(autoincrement())
  first_name  String
  last_name   String
  city        String
  email       String       @unique
  phone       String
  password    String
  role        ROLE         @default(USER)
  reviews     Review[]
  restaurants Restaurant[]
  bookings    Booking[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Review {
  id            Int        @id @default(autoincrement())
  first_name    String
  last_name     String
  text          String
  rating        Float
  restaurant_id Int
  restaurant    Restaurant @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)
  user_id       Int
  user          User       @relation(fields: [user_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Booking {
  id               Int      @id @default(autoincrement())
  number_of_people Int
  booking_time     DateTime

  booker_id Int?
  booker    User? @relation(fields: [booker_id], references: [id], onDelete: Cascade)

  booker_email      String
  booker_phone      String
  booker_first_name String
  booker_last_name  String
  booker_occasion   String?
  booker_request    String?
  tables            Table[]

  restaurant_id Int
  restaurant    Restaurant @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Table {
  id            Int        @id @default(autoincrement())
  seats         Int
  bookings      Booking[]
  restaurant_id Int
  restaurant    Restaurant @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

enum PRICE {
  CHEAP
  REGULAR
  EXPENSIVE
}

enum ROLE {
  USER
  OWNER
}
